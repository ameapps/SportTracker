"use strict";(self.webpackChunkSportMonitoring=self.webpackChunkSportMonitoring||[]).push([[5143],{5143:(O,x,b)=>{b.r(x),b.d(x,{FilesystemWeb:()=>F});var c=b(8239),D=b(8384);function v(h){const p=h.split("/").filter(t=>"."!==t),e=[];return p.forEach(t=>{".."===t&&e.length>0&&".."!==e[e.length-1]?e.pop():e.push(t)}),e.join("/")}let F=(()=>{class h extends D.Uw{constructor(){super(...arguments),this.DB_VERSION=1,this.DB_NAME="Disc",this._writeCmds=["add","put","delete"]}initDb(){var e=this;return(0,c.Z)(function*(){if(void 0!==e._db)return e._db;if(!("indexedDB"in window))throw e.unavailable("This browser doesn't support IndexedDB");return new Promise((t,n)=>{const r=indexedDB.open(e.DB_NAME,e.DB_VERSION);r.onupgradeneeded=h.doUpgrade,r.onsuccess=()=>{e._db=r.result,t(r.result)},r.onerror=()=>n(r.error),r.onblocked=()=>{console.warn("db blocked")}})})()}static doUpgrade(e){const n=e.target.result;switch(e.oldVersion){case 0:case 1:default:n.objectStoreNames.contains("FileStorage")&&n.deleteObjectStore("FileStorage"),n.createObjectStore("FileStorage",{keyPath:"path"}).createIndex("by_folder","folder")}}dbRequest(e,t){var n=this;return(0,c.Z)(function*(){const r=-1!==n._writeCmds.indexOf(e)?"readwrite":"readonly";return n.initDb().then(i=>new Promise((o,d)=>{const a=i.transaction(["FileStorage"],r).objectStore("FileStorage")[e](...t);a.onsuccess=()=>o(a.result),a.onerror=()=>d(a.error)}))})()}dbIndexRequest(e,t,n){var r=this;return(0,c.Z)(function*(){const i=-1!==r._writeCmds.indexOf(t)?"readwrite":"readonly";return r.initDb().then(o=>new Promise((d,s)=>{const u=o.transaction(["FileStorage"],i).objectStore("FileStorage").index(e)[t](...n);u.onsuccess=()=>d(u.result),u.onerror=()=>s(u.error)}))})()}getPath(e,t){const n=void 0!==t?t.replace(/^[/]+|[/]+$/g,""):"";let r="";return void 0!==e&&(r+="/"+e),""!==t&&(r+="/"+n),r}clear(){var e=this;return(0,c.Z)(function*(){(yield e.initDb()).transaction(["FileStorage"],"readwrite").objectStore("FileStorage").clear()})()}readFile(e){var t=this;return(0,c.Z)(function*(){const n=t.getPath(e.directory,e.path),r=yield t.dbRequest("get",[n]);if(void 0===r)throw Error("File does not exist.");return{data:r.content?r.content:""}})()}writeFile(e){var t=this;return(0,c.Z)(function*(){const n=t.getPath(e.directory,e.path),r=e.data,i=e.recursive,o=yield t.dbRequest("get",[n]);if(o&&"directory"===o.type)throw"The supplied path is a directory.";const d=e.encoding,s=n.substr(0,n.lastIndexOf("/"));if(void 0===(yield t.dbRequest("get",[s]))){const u=s.indexOf("/",1);if(-1!==u){const m=s.substr(u);yield t.mkdir({path:m,directory:e.directory,recursive:i})}}const a=Date.now(),l={path:n,folder:s,type:"file",size:r.length,ctime:a,mtime:a,content:!d&&r.indexOf(",")>=0?r.split(",")[1]:r};return yield t.dbRequest("put",[l]),{uri:l.path}})()}appendFile(e){var t=this;return(0,c.Z)(function*(){const n=t.getPath(e.directory,e.path);let r=e.data;const i=n.substr(0,n.lastIndexOf("/")),o=Date.now();let d=o;const s=yield t.dbRequest("get",[n]);if(s&&"directory"===s.type)throw"The supplied path is a directory.";if(void 0===(yield t.dbRequest("get",[i]))){const l=i.indexOf("/",1);if(-1!==l){const u=i.substr(l);yield t.mkdir({path:u,directory:e.directory,recursive:!0})}}void 0!==s&&(r=s.content+r,d=s.ctime);const a={path:n,folder:i,type:"file",size:r.length,ctime:d,mtime:o,content:r};yield t.dbRequest("put",[a])})()}deleteFile(e){var t=this;return(0,c.Z)(function*(){const n=t.getPath(e.directory,e.path);if(void 0===(yield t.dbRequest("get",[n])))throw Error("File does not exist.");if(0!==(yield t.dbIndexRequest("by_folder","getAllKeys",[IDBKeyRange.only(n)])).length)throw Error("Folder is not empty.");yield t.dbRequest("delete",[n])})()}mkdir(e){var t=this;return(0,c.Z)(function*(){const n=t.getPath(e.directory,e.path),r=e.recursive,i=n.substr(0,n.lastIndexOf("/")),o=(n.match(/\//g)||[]).length,d=yield t.dbRequest("get",[i]),s=yield t.dbRequest("get",[n]);if(1===o)throw Error("Cannot create Root directory");if(void 0!==s)throw Error("Current directory does already exist.");if(!r&&2!==o&&void 0===d)throw Error("Parent directory must exist");if(r&&2!==o&&void 0===d){const l=i.substr(i.indexOf("/",1));yield t.mkdir({path:l,directory:e.directory,recursive:r})}const y=Date.now(),a={path:n,folder:i,type:"directory",size:0,ctime:y,mtime:y};yield t.dbRequest("put",[a])})()}rmdir(e){var t=this;return(0,c.Z)(function*(){const{path:n,directory:r,recursive:i}=e,o=t.getPath(r,n),d=yield t.dbRequest("get",[o]);if(void 0===d)throw Error("Folder does not exist.");if("directory"!==d.type)throw Error("Requested path is not a directory");const s=yield t.readdir({path:n,directory:r});if(0!==s.files.length&&!i)throw Error("Folder is not empty");for(const y of s.files){const a=`${n}/${y}`;"file"===(yield t.stat({path:a,directory:r})).type?yield t.deleteFile({path:a,directory:r}):yield t.rmdir({path:a,directory:r,recursive:i})}yield t.dbRequest("delete",[o])})()}readdir(e){var t=this;return(0,c.Z)(function*(){const n=t.getPath(e.directory,e.path),r=yield t.dbRequest("get",[n]);if(""!==e.path&&void 0===r)throw Error("Folder does not exist.");return{files:(yield t.dbIndexRequest("by_folder","getAllKeys",[IDBKeyRange.only(n)])).map(d=>d.substring(n.length+1))}})()}getUri(e){var t=this;return(0,c.Z)(function*(){const n=t.getPath(e.directory,e.path);let r=yield t.dbRequest("get",[n]);return void 0===r&&(r=yield t.dbRequest("get",[n+"/"])),{uri:(null==r?void 0:r.path)||n}})()}stat(e){var t=this;return(0,c.Z)(function*(){const n=t.getPath(e.directory,e.path);let r=yield t.dbRequest("get",[n]);if(void 0===r&&(r=yield t.dbRequest("get",[n+"/"])),void 0===r)throw Error("Entry does not exist.");return{type:r.type,size:r.size,ctime:r.ctime,mtime:r.mtime,uri:r.path}})()}rename(e){var t=this;return(0,c.Z)(function*(){return t._copy(e,!0)})()}copy(e){var t=this;return(0,c.Z)(function*(){return t._copy(e,!1)})()}requestPermissions(){return(0,c.Z)(function*(){return{publicStorage:"granted"}})()}checkPermissions(){return(0,c.Z)(function*(){return{publicStorage:"granted"}})()}_copy(e){var t=this;return(0,c.Z)(function*(n,r=!1){let{toDirectory:i}=n;const{to:o,from:d,directory:s}=n;if(!o||!d)throw Error("Both to and from must be provided");i||(i=s);const y=t.getPath(s,d),a=t.getPath(i,o);if(y===a)return;if(function(h,p){h=v(h),p=v(p);const e=h.split("/"),t=p.split("/");return h!==p&&e.every((n,r)=>n===t[r])}(y,a))throw Error("To path cannot contain the from path");let l;try{l=yield t.stat({path:o,directory:i})}catch(g){const f=o.split("/");f.pop();const _=f.join("/");if(f.length>0&&"directory"!==(yield t.stat({path:_,directory:i})).type)throw new Error("Parent directory of the to path is a file")}if(l&&"directory"===l.type)throw new Error("Cannot overwrite a directory with a file");const u=yield t.stat({path:d,directory:s}),m=function(){var g=(0,c.Z)(function*(f,_,w){const R=t.getPath(i,f),P=yield t.dbRequest("get",[R]);P.ctime=_,P.mtime=w,yield t.dbRequest("put",[P])});return function(_,w,R){return g.apply(this,arguments)}}(),E=u.ctime?u.ctime:Date.now();switch(u.type){case"file":{const g=yield t.readFile({path:d,directory:s});return r&&(yield t.deleteFile({path:d,directory:s})),yield t.writeFile({path:o,directory:i,data:g.data}),void(r&&(yield m(o,E,u.mtime)))}case"directory":{if(l)throw Error("Cannot move a directory over an existing object");try{yield t.mkdir({path:o,directory:i,recursive:!1}),r&&(yield m(o,E,u.mtime))}catch(f){}const g=(yield t.readdir({path:d,directory:s})).files;for(const f of g)yield t._copy({from:`${d}/${f}`,to:`${o}/${f}`,directory:s,toDirectory:i},r);r&&(yield t.rmdir({path:d,directory:s}))}}}).apply(this,arguments)}}return h._debug=!0,h})()}}]);